diff --git a/node_modules/ember-source/dist/dependencies/@glimmer/manager.js b/node_modules/ember-source/dist/dependencies/@glimmer/manager.js
index f1ed636..ee96189 100644
--- a/node_modules/ember-source/dist/dependencies/@glimmer/manager.js
+++ b/node_modules/ember-source/dist/dependencies/@glimmer/manager.js
@@ -888,4 +888,7 @@ function getComponentTemplate(obj) {
   return undefined;
 }
 
-export { setInternalHelperManager, setInternalModifierManager, setInternalComponentManager, getInternalHelperManager, getInternalModifierManager, getInternalComponentManager, hasInternalHelperManager, hasInternalModifierManager, hasInternalComponentManager, setHelperManager, setModifierManager, setComponentManager, componentCapabilities, CustomComponentManager, modifierCapabilities, CustomModifierManager, helperCapabilities, hasDestroyable, hasValue, CustomHelperManager, getComponentTemplate, setComponentTemplate, capabilityFlagsFrom, hasCapability, managerHasCapability, getCustomTagFor, setCustomTagFor };
+var capabilities = () => CAPABILITIES;
+
+
+export { capabilities, setInternalHelperManager, setInternalModifierManager, setInternalComponentManager, getInternalHelperManager, getInternalModifierManager, getInternalComponentManager, hasInternalHelperManager, hasInternalModifierManager, hasInternalComponentManager, setHelperManager, setModifierManager, setComponentManager, componentCapabilities, CustomComponentManager, modifierCapabilities, CustomModifierManager, helperCapabilities, hasDestroyable, hasValue, CustomHelperManager, getComponentTemplate, setComponentTemplate, capabilityFlagsFrom, hasCapability, managerHasCapability, getCustomTagFor, setCustomTagFor };
diff --git a/node_modules/ember-source/dist/packages/@ember/debug/index.js b/node_modules/ember-source/dist/packages/@ember/debug/index.js
index 681b1a6..ce8bcdd 100644
--- a/node_modules/ember-source/dist/packages/@ember/debug/index.js
+++ b/node_modules/ember-source/dist/packages/@ember/debug/index.js
@@ -275,4 +275,10 @@ if (DEBUG && !isTesting()) {
   }
 }
 
+if (typeof deprecate !== 'function') {
+  deprecate = function (message, test, options) {
+   console.log('deprecate', message, test, options);
+  };
+}
+
 export { assert, info, warn, debug, deprecate, debugSeal, debugFreeze, runInDebug, deprecateFunc, setDebugFunction, getDebugFunction, _warnIfUsingStrippedFeatureFlags };
\ No newline at end of file
diff --git a/node_modules/ember-source/dist/packages/@ember/test/index.js b/node_modules/ember-source/dist/packages/@ember/test/index.js
index 8d78b05..90567d1 100644
--- a/node_modules/ember-source/dist/packages/@ember/test/index.js
+++ b/node_modules/ember-source/dist/packages/@ember/test/index.js
@@ -1,14 +1,22 @@
-import require, { has } from 'require';
+// import require, { has } from 'require';
 export let registerAsyncHelper;
 export let registerHelper;
 export let registerWaiter;
 export let unregisterHelper;
 export let unregisterWaiter;
 
+function has() {
+  return false;
+}
+
 if (has('ember-testing')) {
   let {
     Test
-  } = require('ember-testing');
+  } = {
+    Test: {
+      
+    }
+  }
 
   registerAsyncHelper = Test.registerAsyncHelper;
   registerHelper = Test.registerHelper;
diff --git a/node_modules/ember-source/dist/packages/ember/index.js b/node_modules/ember-source/dist/packages/ember/index.js
index 9382f12..d1ba788 100644
--- a/node_modules/ember-source/dist/packages/ember/index.js
+++ b/node_modules/ember-source/dist/packages/ember/index.js
@@ -1,4 +1,3 @@
-import require, { has } from 'require';
 import { getENV, getLookup, setLookup } from '@ember/-internals/environment';
 import * as utils from '@ember/-internals/utils';
 import { Registry, Container } from '@ember/-internals/container';
@@ -10,7 +9,7 @@ import * as EmberDebug from '@ember/debug';
 import { assert, captureRenderTree, deprecate } from '@ember/debug';
 import Backburner from 'backburner';
 import Controller, { inject as injectController, ControllerMixin } from '@ember/controller';
-import { _getStrings, _setStrings, dasherize, camelize, capitalize, classify, decamelize, loc, underscore, w } from '@ember/string';
+import { _getStrings, _setStrings, dasherize, camelize, capitalize, classify, decamelize, underscore, w } from '@ember/string';
 import Service, { service } from '@ember/service';
 import EmberObject, { action, computed, observer } from '@ember/object';
 import { dependentKeyCompat } from '@ember/object/compat';
@@ -54,6 +53,15 @@ import { templateOnlyComponent, invokeHelper, hash, array, concat, get, on, fn }
 import { helperCapabilities, setModifierManager, setComponentTemplate, getComponentTemplate, setHelperManager } from '@glimmer/manager';
 import { assertDestroyablesDestroyed, associateDestroyableChild, destroy, enableDestroyableTracking, isDestroying, isDestroyed, registerDestructor, unregisterDestructor } from '@ember/destroyable'; // ****@ember/-internals/environment****
 
+function require(a) {
+  console.log(`require: ${a}`);
+}
+
+function has(a) {
+  console.log(`has: ${a}`);
+  return false;
+}
+
 const Ember = {};
 Ember.isNamespace = true;
 
@@ -219,7 +227,6 @@ Ember._Backburner = Backburner; // ****@ember/-internals/runtime****
 
 Ember.A = A;
 Ember.String = {
-  loc,
   w,
   dasherize,
   decamelize,
@@ -512,11 +519,22 @@ function defineEmberTestingLazyLoad(key) {
 defineEmberTestingLazyLoad('Test');
 defineEmberTestingLazyLoad('setupForTesting');
 runLoadHooks('Ember');
+
+const registry = {};
+
+function define(name, deps, callback) {
+  console.log('define', name, deps, callback);
+  registry[name] = {
+    deps,
+    callback
+  };
+}
+
 Ember.__loader = {
   require,
   // eslint-disable-next-line no-undef
   define,
   // eslint-disable-next-line no-undef
-  registry: typeof requirejs !== 'undefined' ? requirejs.entries : require.entries
+  registry: registry
 };
 export default Ember;
\ No newline at end of file
